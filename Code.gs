/**
 * This function handles simple onEdit events and detects if the checkbox on the ORDER FORM or BOOKING PROGRAM page is checked and then checks a hidden checkbox on the BOOKING PROGRAM.
 * An external spreadsheet is watching the hidden checkbox and when the value has changed to true, a script will run that locks this spreadsheet from the user and sends emails to the
 * appropriate recipients. This script also sets the values on the hidden ORDER CONFIRMATION and EXPORT sheets in order to attach those documents to the emails.
 * 
 * @param {Event Object} e : The event object generated by the simple on edit trigger.
 * @author Jarren Ralf
 */
function onEdit(e)
{
  const row = e.range.rowStart;
  const col = e.range.columnStart;

  if (row === e.range.rowEnd && col === e.range.columnEnd) // Single cell
  {
    const sheetName = SpreadsheetApp.getActiveSheet().getSheetName();

    if ( (sheetName === 'BOOKING PROGRAM' && row === 30 && col === 1)       || (sheetName === 'Order Form'               && row === 2 && col === 1) 
      || (sheetName === 'Order Form (Hoochies)'  && row === 2 && col === 1) || (sheetName === 'Order Form (Golden Bait)' && row === 2 && col === 1) 
      || (sheetName === 'Order Form (Clearance)' && row === 2 && col === 1)) // If either checkbox is checked
    {
      if (e.value === 'TRUE')
      {
        const spreadsheet = e.source;
        const ui = SpreadsheetApp.getUi();
        const sheet = spreadsheet.getSheetByName('BOOKING PROGRAM');
        const bookingValues = sheet.getSheetValues(4, 2, 9, 1); // Contains some values to check if the order is ready for submission

        if (bookingValues[8][0] == 0) // If the total is $0.00, then no items have been ordered, therefore prompt the user to order atleast 1 item
        {
          ui.alert('Please order at least 1 item before submitting your booking.')
          e.range.uncheck(); // Uncheck the checkbox that the user selected which triggered this script to run
        }
        else if (bookingValues[0][0] === '') // The customer has not edited the PO field or set it to blank
        {
          sheet.getRange(4, 2).setValue('PNT_Booking_Order_2025').activate() // Take the user to the PO Number field
          SpreadsheetApp.flush();
          ui.alert('Please enter a PO Number before submitting your order.')
          e.range.uncheck(); // Uncheck the checkbox that the user selected which triggered this script to run
        }
        else // Order is ready for submission
        {
          const response = ui.alert('Is your order complete and ready for submission to Pacific Net & Twine?', ui.ButtonSet.YES_NO) // Double check if the user is ready to submit their order

          if (response !== ui.Button.YES) // The user has selected CLOSE or NO
            e.range.uncheck(); // Uncheck the checkbox that the user selected which triggered this script to run
          else
          {
            const orderConfirmationSheet = spreadsheet.getSheetByName('ORDER CONFIRMATION')
            const exportSheet = spreadsheet.getSheetByName('Export')
            const exportData = orderConfirmationSheet.getSheetValues(4, 1, orderConfirmationSheet.getLastRow() - 3, 10).map(item => ['D', item[0], Math.round((item[7] + Number.EPSILON) * 100) / 100, item[8]]);
            exportSheet.getRange(2, 1, exportSheet.getMaxRows() - 1, exportSheet.getMaxColumns()).clearContent().offset(0, 0, exportData.length, exportData[0].length).setValues(exportData)
            SpreadsheetApp.flush();
            spreadsheet.getRangeByName('Hidden_Checkbox').check() // This checkbox will trigger the unbound script to lock the sheet and send the appropriate emails
            spreadsheet.getRangeByName('Checkbox').check()
            spreadsheet.getRangeByName('OF_Checkbox').check()
            spreadsheet.getRangeByName('OF_Hoochie_Checkbox').check()
            spreadsheet.getRangeByName('OF_GoldenBait_Checkbox').check()
            spreadsheet.getRangeByName('OF_Clearance_Checkbox').check()
            SpreadsheetApp.flush();
            ui.alert('Order Submitted!\n\nThank You.')
          }
        }
      }
      else
      {
        const spreadsheet = e.source;
        
        spreadsheet.getRangeByName('Hidden_Checkbox').uncheck()
        spreadsheet.getRangeByName('Checkbox').uncheck()
        spreadsheet.getRangeByName('OF_Checkbox').uncheck()
        spreadsheet.getRangeByName('OF_Hoochie_Checkbox').uncheck()
        spreadsheet.getRangeByName('OF_GoldenBait_Checkbox').uncheck()
        spreadsheet.getRangeByName('OF_Clearance_Checkbox').uncheck()
        SpreadsheetApp.flush();
        SpreadsheetApp.getUi().alert('Please resubmit your order when you are ready.\n\nThank You')
      }
    }
  }
}

/**
 * This function creates the order confirmation that will be email to the customers and sales representatives.
 * 
 * @param {Object[][]} data : The multi array of data that is used to create the order confirmation.
 * @author Jarren Ralf
 * @customfunction
 */
function getOrderConfirmation(data1, data2, data3, data4)
{
  const itemValues = [];
  const orderForm = data1.filter(orderQty => orderQty[8] !== '');
  const orderForm_Hoochies = data2.filter(orderQty => orderQty[8] !== '');
  const orderForm_GoldenBait = data3.filter(orderQty => orderQty[8] !== '');
  const orderForm_Clearance = data4.filter(orderQty => orderQty[8] !== '');

  if (orderForm.length !== 0)
    itemValues.push(...orderForm.map(item => {item.pop(); return item}));
  if (orderForm_Hoochies.length !== 0)
    itemValues.push(...orderForm_Hoochies.map(item => {item.pop(); return item}));
  if (orderForm_GoldenBait.length !== 0)
    itemValues.push(...orderForm_GoldenBait.map(item => {item.pop(); return item}));
  if (orderForm_Clearance.length !== 0)
    itemValues.push(...orderForm_Clearance.map(item => {item.pop(); return item}));
  
  return (itemValues.length === 0) ? '' : itemValues;
}

function getImages()
{
  const fromShopifySheet = SpreadsheetApp.openById('1sLhSt5xXPP5y9-9-K8kq4kMfmTuf6a9_l9Ohy0r82gI').getSheetByName('FromShopify')
  const imageURLs = fromShopifySheet.getSheetValues(2, 15, fromShopifySheet.getLastRow() - 1, 11)
  const sheet = SpreadsheetApp.getActive().getActiveSheet()
  const range = sheet.getRange(665, 1, sheet.getLastRow() - 664, sheet.getLastColumn())
  const values = range.getValues()
  const backgroundColours = range.getBackgrounds()
  var r = 665, rr = 0, rows = [], numRows = [], images = [[], [], [], [], [], []]
  
  for (var i = 0; i < values.length; i++)
  {
    if (values[i][0] !== '' && backgroundColours[i][0] != '#6d9eeb')
    {
      for (var j = 0; j < imageURLs.length; j++)
      {
        if (imageURLs[j][0].toString().toUpperCase() === values[i][0].toString().toUpperCase())
        {
          images[rows.length].push([SpreadsheetApp.newCellImage().setSourceUrl(imageURLs[j][10]).build()])
          break;
        }
      }

      if (j === imageURLs.length)
        images[rows.length].push([""])
      
      rr++;
    }
    else if (backgroundColours[i][0] != '#ffffff')
    {
      rows.push(r);
      numRows.push(rr);
      r = i + 666;
      rr = 0;
    }
  }

  // sheet.getRange(rows[0], 11, numRows[0]).setValues(images[0])
  // sheet.getRange(rows[1], 11, numRows[1]).setValues(images[1])
  // sheet.getRange(rows[2], 11, numRows[2]).setValues(images[2])
}

function getImage()
{
  const fromShopifySheet = SpreadsheetApp.openById('1sLhSt5xXPP5y9-9-K8kq4kMfmTuf6a9_l9Ohy0r82gI').getSheetByName('FromShopify')
  const imageURLs = fromShopifySheet.getSheetValues(2, 15, fromShopifySheet.getLastRow() - 1, 11)
  const spreadsheet = SpreadsheetApp.getActive();
  const sheet = spreadsheet.getActiveSheet();
  const row = sheet.getActiveRange().getRow();
  const sku = sheet.getSheetValues(row, 1, 1, 1)[0][0].toString().toUpperCase()

  for (var j = 0; j < imageURLs.length; j++)
  {
    if (imageURLs[j][0].toString().toUpperCase() === sku)
      break;
  }

  if (j !== imageURLs.length)
    sheet.getRange(row, 11).setValue(SpreadsheetApp.newCellImage().setSourceUrl(imageURLs[j][10]).build())
  else
    spreadsheet.toast('Image Not Found')
}